각 버튼별 실행사항 정리
-중앙 무기버튼 6개
-else
			{
				System.out.println(GameStart.player.Inventory.get(st-1).Name + "을(를) 선택했습니다.");
				System.out.println("효과  : " + GameStart.player.Inventory.get(st-1).ToolTip);
				SelectedWeapon = GameStart.player.Inventory.get(st-1);
				SelectCard();
			}
부분(TurnStart의 SelectWeapon 중) 실행해야 함. 무기버튼 클릭 이전에는 턴종버튼, 몬스터 좌우버튼 외에 모두 비활성화.

-하단 카드버튼 10개
-else
		{
				if (CombatSystem.Check(Deck.Hand.get(num - 1), SelectedWeapon.Con) == true) {
					if (Deck.Hand.get(num - 1).Picked == true) {
						RTU.remove(Deck.Hand.get(num - 1));
						Deck.Hand.get(num - 1).Picked = false;
					} else {
						RTU.add(Deck.Hand.get(num - 1));
						Deck.Hand.get(num - 1).Picked = true;
					}
				} else {
					System.out.println("오류 : 조건에 맞는 대상이 아닙니다.");
				}
		}
부분(TurnSystem.SelectCard 중)을 실행해야 함. 
카드버튼 클릭과정에서는 이전버튼(지금 끄는버튼 자리나 턴종버튼),몬스터 좌우버튼, 공격버튼 외 모두 비활성화.
-선택되었으면 눈에 보이는 변화가 있어야 함(예: 눌린 상태를 유지한다. 색이 바뀐다. 등등.....)
-다시 클릭해서 선택 상태를 취소할 수 있어야 함.

-우측 몬스터 이름 버튼(공격버튼)
-if (RTU.size() == 0)
				System.out.println("오류 : 선택한 카드가 없습니다.");
			else
			{
				SelectTarget();
				break;
			}
부분(TurnSystem.SelectCard 중),
-else
				{
					int sum = 0;
					RTU.clear();
					for(int k =0;k<Deck.Hand.size();k++)
					{
						if (Deck.Hand.get(k).Picked == true)
						{
							sum += Deck.Hand.get(k).value;
							Deck.DiscardedCards.add(Deck.Hand.get(k));
							Deck.Hand.get(k).Picked = false;
							Deck.Hand.remove(k);
							k--;
							
						}
							
					}
					SelectedWeapon.Use(target-1, sum);
					if (GameStart.Enemy.get(target-1).CHP <=0)
					{
						GameStart.Die(target-1);
						if (GameStart.Enemy.isEmpty()==true)
						{
							Deck.DisCard();
							Deck.EndShuffle();
							TurnNum = 0;
							GameStart.Curnode.Cstage.GameOver(true);
							return;
						}
					}
					EInfo();
				break;
				}
부분(TurnSystem.SelectTarget 중) 을 실행해야 함. 사실상 연결된 하나의 코드이므로 윗부분의 코드인 선택카드 유무 확인만 더하는 수준이다.
-현재 우측화면에 나오는 적을 공격하며, 공격 방식은 이전 단계에서 선택된 무기로, 선택된 카드들의 수치를 더해 진행된다.
-공격이 끝나면, 다시 무기 선택 과정으로 돌아가야 한다.(해당 루프는 SelectWeapon에 구현되어 있음)

-몬스터 좌우버튼 2개
-현재 우측화면에 등장하는 몬스터의 +-1번째 몬스터를 보여준다.
-좌, 우측에 더 이상 값이 없으면 아무 동작도 하지 않게 구현한다.

-현재 화면을 끄는 버튼(좌측하단)
-현재는 임시 기능을 하는 듯 하지만, 최종단계에서는 다른 기능을 하는 버튼으로 구현되어야 함.
-1. 이전 버튼 : 이전 단계의 선택을 할 수 있도록 돌아감. (예: 카드 선택-(취소)->무기 선택)
-2. 덱 확인 버튼 : 덱에 남아 있는 카드들 확인(이건 다키스톤에 있는 기능 그대로라고 생각하면 편함. 새 창으로 띄우는게 빠를듯.)
-단, 1번 기능인 이전 버튼은 반드시 GUI 내에 필요하므로 1번 우선도가 높음.
-1번 기능 구현시, 무기 선택 페이즈가 아닐때 턴종버튼에 해당 기능을 부여하거나 
무기 선택 페이즈에서는 이전 기능이 작동하지 않거나 비활성화 상태이도록 해야 함.

-턴종버튼(우측하단)
TurnSystem.TurnEnd();만 실행시켜야 함.
그 외 코드는 TurnEnd()에 가져다 놓고 실행시키는게 코드 직관성이 나을듯.
